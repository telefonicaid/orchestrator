FORMAT: 1A
HOST: orchestrator_host:8084

# Orchestrator

Component to expose an API to automatise provisioning in all the IoT Platform modules.


# Group Orchestrator

All requests, except related with metrics, and ldap, needs credencitals and can be performed providing a 'x-auth-token' header instead of SERVICE_X_USER / SERVICE_X_PASSWORD or SERVICE_X_TOKEN payload fields. But one of these three auth ways should be present.

In the cases where "serviceId" is part of URL "SERVICE_NAME" field at body can be omitted, due to "SERVICE_NAME" is referenced to serviceId. In the same way, "SUBSERVICE_NAME" field at body can be omitted in cases where "subserviceId" is part or the URL

## Services query [/v1.0/service]

### List of Services [GET]
+ Request (application/json)
            {
                "DOMAIN_NAME":"admin_domain",
                "SERVICE_ADMIN_USER":"cloud_admin",
                "SERVICE_ADMIN_PASSWORD": "passwd",
                "SERVICE_ADMIN_TOKEN": "token"
            }
+ Response 200 (application/json)
    + Body
            {
                "domains": [
                    {
                        "enabled": true,
                        "id": "f7a5b8e303ec43e8a912fe26fa79dc02",
                        "name": "test_service",
                        "description": "test_service description"
                    },
                    {
                        "enabled": true,
                        "id": "f7a5b8e303ec43e8a912fe26fa79dc03",
                        "name": "test_service2",
                        "description": "test_service2"
                    }
                ]
            }


### Create Service [POST]
+ Request (application/json)
            {
                "DOMAIN_NAME":"admin_domain",
                "DOMAIN_ADMIN_USER":"cloud_admin",
                "DOMAIN_ADMIN_PASSWORD": "passwd",
                "DOMAIN_ADMIN_TOKEN": "token",
                "NEW_SERVICE_NAME":"test_service",
                "NEW_SERVICE_DESCRIPTION":"test_service description",
                "NEW_SERVICE_ADMIN_USER":"test_admin_service",
                "NEW_SERVICE_ADMIN_PASSWORD":"passwd",
                "NEW_SERVICE_ADMIN_EMAIL":"pepe at site dot com"
                "CREATE_DEFAULT_GROUPS":True,
                "CREATE_DEFAULT_GENERIC_ROLES":True
            }
       Required: ["NEW_SERVICE_NAME", "NEW_SERVICE_ADMIN_USER",  "NEW_SERVICE_ADMIN_PASSWORD"]
       CREATE_DEFAULT_GRUPS: create or not default generic groups named: AdminGroup, ServiceCustomerGroup, SubServiceAdminGroup, SubServiceCustomerGroup. False by default.
       CREATE_DEFAULT_GENERIC_ROLES: assign all component policies to Generic Roles (ServiceCustomer, SubServiceCustomer, admin and SubServiceAdmin). False by default.
+ Response 201 (application/json)
    + Body
            {
             "id" : "000a345gserg345t0"
            }


## Service manager [/v1.0/service/{serviceId}]

### Detail of Service [GET]
+ Parameters
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD":"passwd",
                "SERVICE_ADMIN_TOKEN": "token"
            }
+ Response 200 (application/json)
    + Body
            {
                "enabled": true,
                "id": "f7a5b8e303ec43e8a912fe26fa79dc02",
                "name": "test_service",
                "description": "test_service"
            }


### Modify Service [PUT]
+ Parameters
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD":"passwd",
                "SERVICE_ADMIN_TOKEN": "token",
                "NEW_SERVICE_DESCRIPTION":"new test_service description"
            }
       Required: ["NEW_SERVICE_DESCRIPTION"]
+ Response 200

### Delete a Service [DELETE]
+ Parameters
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD":"passwd",
                "SERVICE_ADMIN_TOKEN": "token"
            }
+ Response 204


## Sub-services in service [/v1.0/service/{serviceId}/subservice]

### List of subservices [GET]
+ Parameters
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD":"passwd",
                "SERVICE_ADMIN_TOKEN": "token"
            }
+ Response 200 (application/json)
    + Body
            {
              "projects": [
                {
                  "description": "test_service Subservicio test_subservice",
                  "id": "c6851f8ef57c4b91b567ab62ca3d0aea",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02",
                  "name": "test_subservice"
                },
                {
                  "description": "test_service Subservicio Basuras",
                  "id": "c6851f8ef57c4b91b567ab62ca3d0aeb",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc03",
                  "name": "Basuras"
                },
                {
                  "description": "test_service Subservicio Jardines",
                  "id": "c6851f8ef57c4b91b567ab62ca3d0aec",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc04",
                  "name": "Jardines"
                }
              ]
            }


### Create SubService [POST]
+ Parameters
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD":"passwd",
                "SERVICE_ADMIN_TOKEN": "token",
                "NEW_SUBSERVICE_NAME":"test_subservice",
                "NEW_SUBSERVICE_DESCRIPTION":"test subservice desc",
                "NEW_SUBSERVICE_ADMIN_USER":"subservice_admin_user",
                "NEW_SUBSERVICE_ADMIN_PASSWORD":"passwd",
                "NEW_SUBSERVICE_ADMIN_EMAIL":"email.at.dot.com"
            }
       Required: ["NEW_SUBSERVICE_NAME" ]
+ Response 201 (application/json)
    + Body
            {
                 "id" : "000234sdgstr45rh0"
            }


## Sub-service of service [/v1.0/service/{serviceId}/subservice/{subserviceId}]

### Detail of SubService [GET]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + subserviceId (required, `string`) ... SubService Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SUBSERVICE_NAME":"test_subservice",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD":"passwd",
                "SERVICE_ADMIN_TOKEN": "token"
            }
+ Response 200 (application/json)
    + Body
            {
                'description': 'testsubservice',
                'domain_id': '06b9a460f5c343b3bc8b43f8533f7ab4',
                'id': '1119023a10064570a2a3de0b5b286500',
                'name': '/test_subservice'
            }


### Modify SubService [PUT]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + subserviceId (required, `string`) ... SubService Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD":"passwd",
                "SERVICE_ADMIN_TOKEN":"token",
                "SUBSERVICE_NAME":"test_subservice",
                "NEW_SUBSERVICE_DESCRIPTION":"testsubservice new desc"
            }
       Required: ["NEW_SUBSERVICE_DESCRIPTION"]
+ Response 200


### Delete a SubService [DELETE]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + subserviceId (required, `string`) ... SubService Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SUBSERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD":"passwd",
                "SERVICE_ADMIN_TOKEN":"token"
            }
+ Response 204


## Roles in service [/v1.0/service/{serviceId}/role{?index}{?count}]

### List Roles[GET]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + index (optional, `number`) ... Start index for pagination
    + count (optional, `number`) ...  Number of results for pagination
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD":"passwd",
            "SERVICE_ADMIN_TOKEN":"token",
            "START_INDEX":"10",
            "COUNT":"10"
        }
+ Response 200 (application/json)
    + Body
        {
            "roles": [
                {
                  "domain_id": "91d79dc2211d43a7985ebc27cdd146df",
                  "id": "c80481d244454cc7b796d4acf8625a69",
                  "name": "aRoleName"
                },
                {
                  "domain_id": "91d79dc2211d43a7985ebc27cdd146dg",
                  "id": "c80481d244454cc7b796d4acf8625a70",
                  "name": "aRoleName 2"
                },
                {
                  "domain_id": "91d79dc2211d43a7985ebc27cdd146dh",
                  "id": "c80481d244454cc7b796d4acf8625a71",
                  "name": "aRoleName 3"
                }

            ]
        }


### Create a Role [POST]
+ Parameters
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD": "passwd",
                "SERVICE_ADMIN_TOKEN": "token",
                "NEW_ROLE_NAME":"DemoRole"
            }
        Required: ["NEW_ROLE_NAME"]
+ Response 201 (application/json)
    + Body
            {
                 "id" : "00342234ergdfy54600"
            }


## Role in Service [/v1.0/service/{serviceId}/role/{roleId}]

### XACML Policies about a Role [GET]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + roleId (required, `string`) ... Role Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD": "passwd",
                "SERVICE_ADMIN_TOKEN": "token",
                "ROLE_NAME":"DemoRole"
            }
+ Response 200

### set XACML Policy Role [POST]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + roleId (required, `string`) ... Role Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD": "passwd",
                "SERVICE_ADMIN_TOKEN": "token",
                "ROLE_NAME":"DemoRole",
                "POLICY_FILE_NAME": "policy-sth-customer.xml"
            }
        Required: ["POLICY_FILE_NAME"]
        POLICY_FILE_NAME: should be a name used internally by orchestrator
+ Response 201

### Delete a Role [DELETE]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + roleId (required, `string`) ... Role Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD": "passwd",
                "SERVICE_ADMIN_TOKEN": "token",
                "ROLE_NAME":"DemoRole"
            }
+ Response 204


## Policy in a Role in Service [/v1.0/service/{serviceId}/role/{roleId}/policy/{policyId}]

### Delete a Policy from Role [DELETE]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + roleId (required, `string`) ... Role Id
    + policyId (required, `string`) ... Policy Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_ADMIN_USER":"test_admin_service",
                "SERVICE_ADMIN_PASSWORD": "passwd",
                "SERVICE_ADMIN_TOKEN": "token",
                "ROLE_NAME":"DemoRole"
            }
+ Response 204


## User Role assigment [/v1.0/service/{serviceId}/role_assignments{?user_id,subservice_id,role_id,effective,inherit}]

### List of assignment roles to users [GET]
+ Parameters
    + service_id (required, `string`) ... Service Id
    + user_id (optional, `string`) ... User Id
    + subservice_id (optional, `string`) ... Subservice Id (aka Project)
    + role_id (optional, `string`) ... Role Id
    + effective (optional, `boolean`) ... effective in subservice or not
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SUBSERVICE_NAME":"test_subservice",
            "SUBSERVICE_ID":"2342342asdgdsfh34234",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD": "passwd",
            "SERVICE_ADMIN_TOKEN": "token",
            "ROLE_NAME":"ServiceCustomer",
            "ROLE_ID":"s2345567ad678fasdfasdfas",
            "SERVICE_USER_NAME":"user_name",
            "SERVICE_USER_ID":"asdfas52345346sdf",
            "EFFECTIVE":true
        }
        Required: ["ROLE_NAME", "SERVICE_USER_NAME"]
+ Response 200 (application/json)
        {
          "role_assignments": [
            {
              "scope": {
                "domain": {
                  "id": "16966e6fdac74225afb4edf801dd9b2a"
                }
              },
              "role": {
                "id": "0993967f1ea24a82a72ca4198c16ca20",
                "name": "ServiceCustomer",
                "domain_id": "16966e6fdac74225afb4edf801dd9b2a"
              },
              "user": {
                "description": "user of domain test_service",
                "name": "Carl",
                "enabled": true,
                "id": "7ee5a828843945a79026d99ae0057bb9",
                "domain_id": "16966e6fdac74225afb4edf801dd9b2a"
              },
              "links": {
                "assignment": "http://localhost:5001/v3/domains/16966e6fdac74225afb4edf801dd9b2a/users/7ee5a828843945a79026d99ae0057bb9/roles/0993967f1ea24a82a72ca4198c16ca20"
              }
            },
            {
              "scope": {
                "domain": {
                  "id": "16966e6fdac74225afb4edf801dd9b2a"
                }
              },
              "role": {
                "id": "0b597039040b4c31b8a13dfe1180c9ff",
                "name": "admin"
              },
              "user": {
                "description": "Administrator of domain test_service",
                "name": "test_admin_service",
                "enabled": true,
                "id": "a5c624a8402b48c3931d4600a7fe2be9",
                "domain_id": "16966e6fdac74225afb4edf801dd9b2a"
              },
              "links": {
                "assignment": "http://localhost:5001/v3/domains/16966e6fdac74225afb4edf801dd9b2a/users/a5c624a8402b48c3931d4600a7fe2be9/roles/0b597039040b4c31b8a13dfe1180c9ff"
              }
            }
          ]
        }


### Assign role to user [POST]
+ Parameters
    + service_id (required, `string`) ... Service Id
    + user_id (optional, `string`) ... User Id
    + subservice_id (optional, `string`) ... Subservice (aka Project)
    + role_id (optional, `string`) ... Role Id
    + inherit (optional, `boolean`) ... assign role in all subservices or nor
+ Request (application/json)
        {
            "SUBSERVICE_NAME":"test_subservice",
            "SUBSERVICE_ID":"234234234234sdfgdfghdfgh",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD": "passwd",
            "SERVICE_ADMIN_TOKEN": "token",
            "ROLE_NAME":"ServiceCustomer",
            "ROLE_ID":"sadfasdfasdfae456457567567s",
            "SERVICE_USER_NAME":"user_nameX",
            "SERVICE_USER_ID":"asdfa34563457756sdf",
            "INHERIT":true
        }
        Required: ["ROLE_NAME", "SERVICE_USER_NAME"]
+ Response 201


### Revoke Role to user [DELETE]
+ Parameters
    + service_id (required, `string`) ... Service Id
    + user_id (optional, `string`) ... User Id
    + subservice_id (optional, `string`) ... Subservice (aka Project)
    + role_id (optional, `string`) ... Role Id
    + inherit (optional, `boolean`) ... assign role in all subservices or nor
+ Request (application/json)
        {
            "SUBSERVICE_NAME":"test_subservice",
            "SUBSERVICE_ID":"23423423423fghfgh4",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD": "passwd",
            "SERVICE_ADMIN_TOKEN": "token",
            "ROLE_NAME":"ServiceCustomer",
            "ROLE_ID":"sadfasdfasd5674567fas",
            "SERVICE_USER_NAME":"user_nameX",
            "SERVICE_USER_ID":"asd54634574567fasdf",
            "INHERIT":true
        }
+ Response 204



## Group Role assigment [/v1.0/service/{serviceId}/group_role_assignments{?group_id,subservice_id,role_id,effective,inherit}]

### List of assignment roles to groups [GET]
+ Parameters
    + service_id (required, `string`) ... Service Id
    + group_id (optional, `string`) ... Group Id
    + subservice_id (optional, `string`) ... Subservice Id (aka Project)
    + role_id (optional, `string`) ... Role Id
    + effective (optional, `boolean`) ... effective in subservice or not
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SUBSERVICE_NAME":"test_subservice",
            "SUBSERVICE_ID":"2342342asdgdsfh34234",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD": "passwd",
            "SERVICE_ADMIN_TOKEN": "token",
            "ROLE_NAME":"ServiceCustomer",
            "ROLE_ID":"s2345567ad678fasdfasdfas",
            "GROUP_NAME":"group_name",
            "GROUP_ID":"asdfas52345346sdf",
            "EFFECTIVE":true
        }
        Required: ["ROLE_NAME", "GROUP_NAME"]
+ Response 200 (application/json)
        {
          "role_assignments": [
            {
              "scope": {
                "domain": {
                  "id": "16966e6fdac74225afb4edf801dd9b2a"
                }
              },
              "role": {
                "id": "0993967f1ea24a82a72ca4198c16ca20",
                "name": "ServiceCustomer",
                "domain_id": "16966e6fdac74225afb4edf801dd9b2a"
              },
              "group": {
                "description": "group of domain test_service",
                "name": "CarlGroup",
                "enabled": true,
                "id": "7ee5a828843945a79026d99ae0057bb9",
                "domain_id": "16966e6fdac74225afb4edf801dd9b2a"
              },
              "links": {
                "assignment": "http://localhost:5001/v3/domains/16966e6fdac74225afb4edf801dd9b2a/groups/7ee5a828843945a79026d99ae0057bb9/roles/0993967f1ea24a82a72ca4198c16ca20"
              }
            }
          ]
        }


### Assign role to group [POST]
+ Parameters
    + service_id (required, `string`) ... Service Id
    + group_id (optional, `string`) ... Group Id
    + subservice_id (optional, `string`) ... Subservice (aka Project)
    + role_id (optional, `string`) ... Role Id
    + inherit (optional, `boolean`) ... assign role in all subservices or nor
+ Request (application/json)
        {
            "SUBSERVICE_NAME":"test_subservice",
            "SUBSERVICE_ID":"234234234234sdfgdfghdfgh",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD": "passwd",
            "SERVICE_ADMIN_TOKEN": "token",
            "ROLE_NAME":"ServiceCustomer",
            "ROLE_ID":"sadfasdfasdfae456457567567s",
            "GROUP_NAME":"group_nameX",
            "GROUP_ID":"asdfa34563457756sdf",
            "INHERIT":true
        }
        Required: ["ROLE_NAME", "GROUP_NAME"]
+ Response 201


### Revoke Role to group [DELETE]
+ Parameters
    + service_id (required, `string`) ... Service Id
    + group_id (optional, `string`) ... Group Id
    + subservice_id (optional, `string`) ... Subservice (aka Project)
    + role_id (optional, `string`) ... Role Id
    + inherit (optional, `boolean`) ... assign role in all subservices or nor
+ Request (application/json)
        {
            "SUBSERVICE_NAME":"test_subservice",
            "SUBSERVICE_ID":"23423423423fghfgh4",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD": "passwd",
            "SERVICE_ADMIN_TOKEN": "token",
            "ROLE_NAME":"ServiceCustomer",
            "ROLE_ID":"sadfasdfasd5674567fas",
            "GROUP_NAME":"group_nameX",
            "GROUP_ID":"asd54634574567fasdf",
            "INHERIT":true
        }
+ Response 204


## Users in Service [/v1.0/service/{serviceId}/user{?index}{?count}]

### User Service list [GET]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + index (optional, `number`) ... Start index for pagination
    + count (optional, `number`) ...  Number of results for pagination
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD":"passwd",
            "SERVICE_ADMIN_TOKEN":"token",
            "START_INDEX":"10",
            "COUNT":"10"
        }
+ Response 200 (application/json)
    + Body
        {
            "users" : [
                {
                  "description": "Administrator of domain dom1",
                  "name": "test_admin_service",
                  "enabled": true,
                  "id": "8ac8aa6470c64b5083a6778fc2cd7828",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02"
                },
                {
                  "description": "Alice",
                  "name": "alice",
                  "enabled": true,
                  "id": "5e817c5e0d624ee68dfb7a72d0d31ce4",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02"
                },
                {
                  "description": "Bob",
                  "name": "bob",
                  "enabled": true,
                  "id": "5e817c5e0d624ee68dfb7a72d0d31ce4",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02"
                },
                {
                  "description": "Alice2",
                  "name": "alice",
                  "enabled": true,
                  "id": "5e817c5e0d624ee68dfb7a72d0d31ce4",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02"
                }
            ]
        }


### Create Users [POST]
+ Parameters
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD":"passwd",
            "SERVICE_ADMIN_TOKEN":"token",
            "NEW_SERVICE_USER_NAME":"user_name_new",
            "NEW_SERVICE_USER_PASSWORD":"passwd",
            "NEW_SERVICE_USER_EMAIL":"email@email.com",
            "NEW_SERVICE_USER_DESCRIPTION":"user description"
        }
+ Response 201 (application/json)
        {
            "id": 00000
        }


## User in Service [/v1.0/service/{serviceId}/user/{userId}]

### detail of user [GET]
+ Parameters
    + userId (required, `string`) ... User Id
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD":"passwd",
            "SERVICE_ADMIN_TOKEN":"token"
        }
+ Response 200 (application/json)
        {
          "userName": "alice",
          "urn:scim:schemas:extension:keystone:1.0": {
            "domain_id": "91d79dc2211d43a7985ebc27cdd146df"
          },
          "emails": [
            {
              "value": "alice@mailhost.com"
            }
          ],
          "active": true,
          "id": "a5e8c847f7264c5a9f01a22904e3ae93",
          "schemas": [
            "urn:scim:schemas:core:1.0",
            "urn:scim:schemas:extension:keystone:1.0"
          ]
        }


### update an user (by his admin) [PUT]
+ Parameters
    + userId (required, `string`) ... User Id
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
        {
             "SERVICE_NAME":"test_service",
             "SERVICE_ADMIN_USER":"test_admin_service",
             "SERVICE_ADMIN_PASSWORD":"passwd",
             "SERVICE_ADMIN_TOKEN":"token",
             "USER_NAME":"user_name",
             "USER_DATA_VALUE": { "emails": [ {"value": "test@gmail.com"}],
                                  "name": "new user name",
                                  "description": "new user description",
                                  "password": "new user password"
                                }
        }
+ Response 200


### change user password by himself [POST]
+ Parameters
    + userId (required, `string`) ... User Id
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
        {
             "SERVICE_NAME": "test_service",
             "SERVICE_USER_TOKEN": "token",
             "SERVICE_USER_NAME": "username",
             "SERVICE_USER_PASSWORD": "old_passwd",
             "NEW_USER_PASSWORD": "new_passwd"
        }
+ Response 200


### delete an user [DELETE]
+ Parameters
    + userId (required, `string`) ... User Id
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD":"passwd",
            "SERVICE_ADMIN_TOKEN":"token",
            "USER_NAME":"user_name"

        }
+ Response 204


## Groups in Service [/v1.0/service/{serviceId}/group{?index}{?count}]

### Group Service list [GET]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + index (optional, `number`) ... Start index for pagination
    + count (optional, `number`) ...  Number of results for pagination
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD":"passwd",
            "SERVICE_ADMIN_TOKEN":"token",
            "START_INDEX":"10",
            "COUNT":"10"
        }
+ Response 200 (application/json)
    + Body
        {
            "groups" : [
                {
                  "description": "SubServiceCustomer group",
                  "name": "SubServiceCustomerGroup",
                  "id": "8ac8aa6470c64b5083a6778fc2cd7828",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02"
                },
                {
                  "description": "SubServiceAdmin group",
                  "name": "SubServiceAdminGroup",
                  "id": "5e817c5e0d624ee68dfb7a72d0d31ce4",
                  "domain_id": "f7a5b8e303ec43e8a912fe26fa79dc02"
                },
            ]
        }


### Create Groups [POST]
+ Parameters
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD":"passwd",
            "SERVICE_ADMIN_TOKEN":"token",
            "NEW_SERVICE_GROUP_NAME":"group_name_new",
            "NEW_SERVICE_GROUP_DESCRIPTION":"group description"
        }
+ Response 201 (application/json)
        {
            "id": 00000
        }


## Group in Service [/v1.0/service/{serviceId}/group/{groupId}]

### detail of a group [GET]
+ Parameters
    + groupId (required, `string`) ... Group Id
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD":"passwd",
            "SERVICE_ADMIN_TOKEN":"token"
        }
+ Response 200 (application/json)
        {
          "groupName": "MyGroup",
          "urn:scim:schemas:extension:keystone:1.0": {
            "domain_id": "91d79dc2211d43a7985ebc27cdd146df"
          },
          "id": "a5e8c847f7264c5a9f01a22904e3ae93",
          "schemas": [
            "urn:scim:schemas:core:1.0",
            "urn:scim:schemas:extension:keystone:1.0"
          ]
        }


### update a group (by his admin) [PUT]
+ Parameters
    + groupId (required, `string`) ... Group Id
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
        {
             "SERVICE_NAME":"test_service",
             "SERVICE_ADMIN_USER":"test_admin_service",
             "SERVICE_ADMIN_PASSWORD":"passwd",
             "SERVICE_ADMIN_TOKEN":"token",
             "GROUP_NAME":"user_name",
             "GROUP_DATA_VALUE": {
                                  "name": "new group name",
                                  "description": "new group description",
                                }
        }
+ Response 200


### delete a group [DELETE]
+ Parameters
    + groupId (required, `string`) ... Group Id
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD":"passwd",
            "SERVICE_ADMIN_TOKEN":"token",
            "GROUP_NAME":"group_name"

        }
+ Response 204


## Trust Token [/v1.0/service/{serviceId}/trust]

### Create Trust Token [POST]
+ Parameters
    + serviceId (required, `string`) ... Service Id
+ Request (application/json)
        {
            "SERVICE_NAME":"test_service",
            "SUBSERVICE_NAME":"test_subservice",
            "SUBSERVICE_ID":"2342342342dfhjghjty34",
            "SERVICE_ADMIN_USER":"test_admin_service",
            "SERVICE_ADMIN_PASSWORD": "passwd",
            "SERVICE_ADMIN_TOKEN": "token",
            "ROLE_NAME":"ServiceCustomer",
            "ROLE_ID":"SDFG93hdg350J34534K5",
            "TRUSTEE_USER_NAME":"iotagent",
            "TRUSTEE_USER_ID":"34563fghfgh5ASDFASD6347",
            "TRUSTOR_USER_NAME":"test_admin_service",
            "TRUSTOR_USER_ID":"45674ASDFAghjghjSDF5674567"
        }
+ Response 201 (application/json)
    + Body
        {
            "ID_TRUST": "147562fcd773448aac3dd53748a43b0c"
        }


## Activate IoT Module in a Sub-service of service [/v1.0/service/{serviceId}/subservice/{subserviceId}/module_activation/{iot_module}]

### list activated IoT Modules [POST]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + subserviceId (required, `string`) ... SubService Id
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_USER_NAME":"test_admin_service",
                "SERVICE_USER_PASSWORD":"passwd",
                "SERVICE_USER_TOKEN":"token",
                "SUBSERVICE_NAME":"test_subservice",
            }
+ Response 200 (application/json)
    + Body
      {
         "activated_modules": [ {"name": "STH", "subscriptionid": "23423435", "alias": "HISTORIC"},
                                {"name": "PERSEO", "subscriptionid": "34243434", "alias": "RULES"} ]
      }

### activate an IoT Module [POST]
+ Parameters
    + serviceId (required, `string`) ... Service Id
    + subserviceId (required, `string`) ... SubService Id
    + iot_module (optional, `string`) ... IOTModule
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_USER_NAME":"test_admin_service",
                "SERVICE_USER_PASSWORD":"passwd",
                "SERVICE_USER_TOKEN":"token",
                "SUBSERVICE_NAME":"test_subservice",
                "IOTMODULE":"STH"
            }
        Required: [ "iot_module/IOTMODULE" ]
+ Response 201 (application/json)
    + Body
      {
         "subscriptionid": "23423435"
      }

### deactivate an IoT Module [DELETE]
+ Parameters
    + serviceId (required, `string`) ... Service id
    + subserviceId (required, `string`) ... SubService Id
    + iot_module (optional, `string`) ... IOTModule
+ Request (application/json)
            {
                "SERVICE_NAME":"test_service",
                "SERVICE_USER_NAME":"test_admin_service",
                "SERVICE_USER_PASSWORD":"passwd",
                "SERVICE_USER_TOKEN":"token",
                "SUBSERVICE_NAME":"test_subservice",
                "IOTMODULE":"STH"
            }
        Required: [ "iot_module/IOTMODULE" ]
+ Response 204


## Stats [/v1.0/version]

### Get Version, Uptime and API stats [GET]
+ Response 201 (application/json)
    + Body
      {
         "uptime": "2015-11-02T08:15:35.166",
         "IoTModules": [
             "STH",
             "PERSEO"
         ],
         "version": "0.5.1",
         "API_stats": {
            "num_delete_user": 40,
            "num_get_role": 20,
            "num_delete_subservice": 330,
            "num_get_service": 30,
            "num_post_trust": 30,
            "num_put_service": 30,
            "num_post_roleassignment": 50,
            "num_post_userlist": 203,
            "num_delete_service": 20,
            "num_delete_role": 30,
            "num_post_subservice": 30,
            "num_post_entity_service": 10,
            "num_get_subservice": 30,
            "num_post_user": 40,
            "num_get_user ": 20,
            "num_put_user": 10,
            "num_get_roleassignment": 20,
            "num_get_userlist": 20,
            "num_post_service": 20,
            "num_delete_roleassignment": 10,
            "num_post_role": 10,
            "num_put_subservice": 10
          }
       }


## LogLevel [/v1.0/admin/log]

### Set new Log Level [PUT]
+ Parameters
  + level (required, `string`) ... ["DEBUG", ... "FATAL"]
+ Response 200

### Get current Log Level [GET]
+ Response 200 (application/json)
    + Body
      {
         "level": "DEBUG"
      }

## Metrics [/v1.0/admin/metrics]

The following metrics are collected by the component:
+ incomingTransactions: number of requests consumed by the component.
+ incomingTransactionRequestSize: total size (bytes) in requests associated to incoming transactions
+ incomingTransactionResponseSize: total size (bytes) in responses associated to incoming transactions
+ incomingTransacionError: number of incoming transactions resulting in error.
+ serviceTime: average time to serve a transaction.

### Get current metrics [GET]

+ Parameters
  + reset (optional, `string`) ... ["true", "false"]
+ Response 200 (application/json)
    + Body
       {
          "service": {
            "service1": {
                "subservs": {
                    "subserv1": {},
                    "subserv2": {}
                },
                "sum": {}
            },
            "service2": {
               "subservs": {
                   "subserv1": {},
                   "subserv2": {}
                },
                "sum": {}
            }
          },
          "sum": {
            "incomingTransactions": 25,
            "incomingTransactionRequestSize": 3456,
            "incomingTransactionResponseSize": 435,
            "incomingTransacionError": 2,
            "serviceTime": 0.48,
            "outgoingTransactions": 46,
            "outgoingTransactionRequestSize": 323361,
            "outgoingTransactionResponseSize": 2343,
            "outgoingTransacionError": 10
          }
       }


### Reset current metrics [DELETE]
+ Parameters
+ Response 204 (application/json)
    + Body
       {
          "service": {
            "service1": {
                "subservs": {
                    "subserv1": {},
                    "subserv2": {}
                },
                "sum": {}
            },
            "service2": {
               "subservs": {
                   "subserv1": {},
                   "subserv2": {}
                },
                "sum": {}
            }
          },
          "sum": {
            "incomingTransactions": 25,
            "incomingTransactionRequestSize": 3456,
            "incomingTransactionResponseSize": 435,
            "incomingTransacionError": 2,
            "serviceTime": 0.48,
            "outgoingTransactions": 46,
            "outgoingTransactionRequestSize": 323361,
            "outgoingTransactionResponseSize": 2343,
            "outgoingTransacionError": 10
          }
       }


## LDAP User [/v1.0/ldap/user]

### Create User [POST]
+ Request (application/json)
      {
         "LDAP_ADMIN_USER": "ldapadminuser",
         "LDAP_ADMIN_PASSWORD": "ldapadminpassword",
         "NEW_USER_NAME": "newusername",
         "NEW_USER_PASSWORD":"passwordforuser",
         "NEW_USER_EMAIL":"user@domain.com",
         "NEW_USER_DESCRIPTION":"user description",
         "GROUP_NAMES": ["SubServiceCustomerGroup"]
      }
+ Response 201 (application/json)
    + Body
      {
         "details": "OK"
      }

### Ask for User Creation [POST]
+ Request (application/json)
      {
         "NEW_USER_NAME": "newusername",
         "NEW_USER_PASSWORD":"passwordforuser",
         "NEW_USER_EMAIL":"user@domain.com",
         "NEW_USER_DESCRIPTION":"user description",
         "GROUP_NAMES": ["SubServiceCustomerGroup"]
      }
+ Response 200 (application/json)
    + Body
      {
         "details": "OK"
      }

### Delete User [DELETE]
+ Request (application/json)
      {
         "LDAP_ADMIN_USER": "ldapadminuser",
         "LDAP_ADMIN_PASSWORD": "ldapadminpassword",
         "USER_NAME": "usertodelete",
      }
+ Response 204 (application/json)


### List Users [GET]
+ Request (application/json)
      {
         "LDAP_ADMIN_USER": "ldapadminuser",
         "LDAP_ADMIN_PASSWORD": "ldapadminpassword",
         "FILTER": "*text*",
      }
+ Response 200 (application/json)
    + Body
      {
         "details": [
                      [ "baseDN": { "uid": [ "useruid"],
                                    "mail": [ "usermail" ],
                                    "cn": [ "usercn" ],
                                 } ],
                      [ "baseDN": { "uid": [ "useruid2"],
                                    "mail": [ "usermail2..." ],
                                    "cn": [ "usercn2..." ],
                                 } ]
                    ]
      }


### Get User Details by Admin [GET]
+ Request (application/json)
      {
         "LDAP_ADMIN_USER": "ldapadminuser",
         "LDAP_ADMIN_PASSWORD": "ldapadminpassword",
         "USER_NAME": "ldapusername"
      }
+ Response 200 (application/json)
    + Body
      {
         "details": [ "baseDN": { "uid": [ "useruid"],
                                  "mail": [ "usermail" ],
                                  "cn": [ "usercn" ],
                                  "member": [ "groupname1", "groupname2" ]
                                 } ]
      }

### Get User Details [GET]
+ Request (application/json)
      {
         "USER_NAME": "ldapusername"
         "USER_PASSWORD": "ldapuserpassword"
      }
+ Response 200 (application/json)
    + Body
      {
         "details": [ "baseDN": { "uid": [ "useruid"],
                                  "mail": [ "usermail" ],
                                  "cn": [ "usercn" ]
                                 } ]
      }

### Update User [PUT]
+ Request (application/json)
      {
         "LDAP_ADMIN_USER": "ldapadminuser",
         "LDAP_ADMIN_PASSWORD": "ldapadminpassword",
         "USER_NAME": "ldapusername",
         "USER_DATA": { "USER_EMAIL": "newemail@domain.org",
                        "USER_DESCRIPTION" "new user description",
                        "GROUP_NAMES": ["NewGroup1", "NewGroup2"]
                      }
      }
+ Response 200 (application/json)
    + Body
      {
         "details": "OK"
      }


## LDAP Auth [/v1.0/ldap/auth]

### Auth User [POST]
+ Request (application/json)
      {
         "USER_NAME":"username",
         "USER_PASSWORD":"userpassword"
      }
+ Response 201 (application/json)
    + Body
      {
         "details": "OK"
      }


## LDAP Group [/v1.0/ldap/group]

### Create Group [POST]
+ Request (application/json)
      {
         "LDAP_ADMIN_USER": "ldapadminuser",
         "LDAP_ADMIN_PASSWORD": "ldapadminpassword",
         "NEW_GROUP_NAME": "newgroupname",
         "NEW_GROUP_DESCRIPTION":"group description"
      }
+ Response 201 (application/json)
    + Body
      {
         "details": "OK"
      }


### Delete Group [DELETE]
+ Request (application/json)
      {
         "LDAP_ADMIN_USER": "ldapadminuser",
         "LDAP_ADMIN_PASSWORD": "ldapadminpassword",
         "GROUP_NAME": "grouptodelete",
      }
+ Response 204 (application/json)


### List Groups [GET]
+ Request (application/json)
      {
         "LDAP_ADMIN_USER": "ldapadminuser",
         "LDAP_ADMIN_PASSWORD": "ldapadminpassword",
         "FILTER": "*text*",
      }
+ Response 200 (application/json)
    + Body
      {
         "details": [
                      [ "baseDN": { "uid": [ "groupuid"],
                                    "cn": [ "groupcn" ],
                                 } ],
                      [ "baseDN": { "uid": [ "groupuid2"],
                                    "cn": [ "groupcn2..." ],
                                 } ]
                    ]
      }


### Get Group Details by Admin [GET]
+ Request (application/json)
      {
         "LDAP_ADMIN_USER": "ldapadminuser",
         "LDAP_ADMIN_PASSWORD": "ldapadminpassword",
         "GROUP_NAME": "ldapgroupname"
      }
+ Response 200 (application/json)
    + Body
      {
         "details": [ "baseDN": { "uid": [ "groupuid"],
                                  "cn": [ "groupcn" ]
                                 } ]
      }

### Update Group [PUT]
+ Request (application/json)
      {
         "LDAP_ADMIN_USER": "ldapadminuser",
         "LDAP_ADMIN_PASSWORD": "ldapadminpassword",
         "GROUP_NAME": "ldapgroupname",
         "GROUP_DESCRIPTION": "new group description",
      }
+ Response 200 (application/json)
    + Body
      {
         "details": "OK"
      }
